include "application.base.conf"

niomon-mqtt {

  server {
    port = ${SVC_HTTP_SERVER_PORT}
    baseUrl = ${SVC_HTTP_SERVER_BASE_URL}
    swaggerPath = ${SVC_HTTP_SWAGGER_PATH}
  }

  flow-out {

    kafkaConsumer {
      //Comma-separeted values of IP/Hostname and ports
      bootstrapServers = ${SVC_FO_KFC_NODES}
      import = ${SVC_FO_KFC_TOPIC}
      //If empty, a group id will be created.
      groupId = ${SVC_FO_KFC_GROUP}
      gracefulTimeout = ${SVC_FO_KFC_GRACEFUL_TIMEOUT} //In Seconds
      maxPollRecords = ${SVC_FO_KFC_MAX_POLL_RECORDS}
      fetchMaxBytesConfig = ${SVC_FO_KFC_FETCH_MAX_BYTES_CONFIG}
      maxPartitionFetchBytesConfig = ${SVC_FO_KFC_MAX_PARTITION_FETCH_BYTES_CONFIG}
      reconnectBackoffMsConfig = ${SVC_FO_KFC_RECONNECT_BACKOFF_MS_CONFIG}
      reconnectBackoffMaxMsConfig = ${SVC_FO_KFC_RECONNECT_BACKOFF_MAX_MS_CONFIG}
    }

    kafkaProducer {
      lingerMS = ${SVC_FO_KFP_LINGER_MS}
      //Comma-separeted values of IP/Hostname and ports
      bootstrapServers = ${SVC_FO_KFP_NODES}
      errorTopic = ${SVC_FO_KFP_ERROR_TOPIC}
    }

  }

  flow-in {
    kafkaProducer {
      lingerMS = ${SVC_FI_KFP_LINGER_MS}
      //Comma-separeted values of IP/Hostname and ports
      bootstrapServers = ${SVC_FI_KFP_NODES}
      errorTopic = ${SVC_FI_KFP_ERROR_TOPIC}
    }
  }

  metrics {
    prometheus {
      port = ${SVC_PROM_HTTP_PORT}
    }
  }

  executionContext {
    threadPoolSize = ${SVC_EXEC_THREAD_POOL_SIZE}
  }

  mqtt {
    brokerUrl = ${SVC_MQTT_BROKER}
    userName = ${SVC_MQTT_USER_NAME}
    password = ${SVC_MQTT_PASSWORD}
    qualityOfService = ${SVC_QUALITY_OF_SERVICE}
  }

}

