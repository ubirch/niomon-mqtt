niomon-mqtt {

  name = "niomon-mqtt"

  server {
    port = 8081
    baseUrl = ""
    swaggerPath = "src/main/scala/com/ubirch/resources/swagger-ui/"
  }

  flow-out {

    kafkaConsumer {
      //Comma-separeted values of IP/Hostname and ports
      bootstrapServers = "localhost:9092"
      import = "ubirch-common-rsp-signed-bin"
      //If empty, a group id will be created.
      groupId = "niomon-mqtt-system-group"
      gracefulTimeout = 2 //In Seconds
      maxPollRecords = 1000
      metricsSubNamespace = ${niomon-mqtt.name}
      fetchMaxBytesConfig = 52428800
      maxPartitionFetchBytesConfig = 1048576
      reconnectBackoffMsConfig = 50
      reconnectBackoffMaxMsConfig = 1000
    }

    kafkaProducer {
      lingerMS = 600
      //Comma-separeted values of IP/Hostname and ports
      bootstrapServers = "localhost:9092"
      errorTopic = "ubirch-niomon-error-json"
    }
  }


  flow-in {
    kafkaProducer {
      lingerMS = 100
      //Comma-separeted values of IP/Hostname and ports
      bootstrapServers = "localhost:9092"
      topic = "ubirch-niomon-req-bin"
      errorTopic = "ubirch-niomon-error-json"

    }
  }

  metrics {
    prometheus {
      port = 4321
    }
  }

  executionContext {
    threadPoolSize = 5
  }

  mqtt {
    brokerUrl = "tcp://amazing-journalist.cloudmqtt.com"
    brokerUrl = ${?MQTT_BROKER}
    clientId = ${niomon-mqtt.name}
    userName = ""
    userName = ${?MQTT_USER_NAME}
    password = ""
    password = ${?MQTT_PASSWORD}
    qualityOfService = 1 // at least once
    inQueuePrefix = "ubirch/upps/anchor/in"
    outQueuePrefix = "ubirch/upps/anchor/out"
  }

}
